rm(list = ls())

## Packages 
require(igraph)
require(ggplot2)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(bipartite) 
require(bbmle)
require(influential)
require(visNetwork)

# -----------------------------
# 1. Build the Graph (directed)
# -----------------------------
cat("\n--- 1. Creating Directed Graph of Judo Attack Combinations ---\n")

# Define attack transitions between judo techniques
# Each line indicates a valid transition in a combination (directed from left to right)
attack_combinations_igraph =graph.formula(
  Seoi.nage-+Seoi.otoshi,
  Seoi.nage-+O.uchi.gari,
  Seoi.nage-+Ko.uchi.gari,
  Ippon.seoi.nage-+Ippon.seoi.nage,
  Ippon.seoi.nage-+Seoi.otoshi,
  Ippon.seoi.nage-+Ko.uchi.gari,
  Ippon.seoi.nage-+Osoto.gari,
  Harai.goshi-+Osoto.gari,
  Harai.goshi-+Uchi.mata,
  Harai.goshi-+Soto.makikomi,
  Uchi.mata-+O.uchi.gari,
  Uchi.mata-+Ko.uchi.gari,
  O.goshi-+O.uchi.gari,
  O.goshi-+Ko.uchi.gari,
  O.goshi-+Harai.goshi,
  O.uchi.gari-+Uchi.mata,
  O.uchi.gari-+Ko.uchi.gari,
  O.uchi.gari-+Osoto.gari,
  O.uchi.gari-+Tai.otoshi,
  O.uchi.gari-+Harai.goshi,
  Ko.uchi.gari-+O.uchi.gari,
  Ko.uchi.gari-+Seoi.nage,
  Ko.uchi.gari-+Ippon.seoi.nage,
  Ko.uchi.gari-+Hane.goshi,
  Osoto.gari-+Harai.goshi,
  Osoto.gari-+Osoto.gari,
  Osoto.gari-+O.uchi.gari,
  Osoto.gari-+Ko.soto.gake,
  Osoto.gari-+Sasae.tsurikomi.ashi,
  Osoto.gari-+Okuri.ashi.harai,
  Osoto.gari-+Hiza.guruma,
  Ko.soto.gari-+Ko.soto.gari,
  Ko.soto.gari-+Osoto.gari,
  Ko.soto.gari-+Tai.otoshi,
  Ko.soto.gari-+Harai.goshi,
  Hiza.guruma-+Harai.goshi,
  Hiza.guruma-+Sasae.tsurikomi.ashi,
  Hiza.guruma-+Osoto.gari,
  Hiza.guruma-+De.ashi.harai,
  Hiza.guruma-+Hiza.guruma,
  Okuri.ashi.harai-+Sode.tsuri.komi.goshi,
  Okuri.ashi.harai-+Tai.otoshi,
  Okuri.ashi.harai-+Harai.goshi,
  Okuri.ashi.harai-+Ippon.seoi.nage,
  Okuri.ashi.harai-+Seoi.nage,
  Tai.otoshi-+Tai.otoshi,
  Tai.otoshi-+Ko.uchi.gari,
  Tai.otoshi-+O.uchi.gari,
  Hikikomi.gaeshi-+O.uchi.gari,
  Hikikomi.gaeshi-+Ko.uchi.gari,
  Hikikomi.gaeshi-+Harai.goshi,
  Hikikomi.gaeshi-+Ko.soto.gari,
  Hikikomi.gaeshi-+Sukui.nage,
  Tsuri.komi.goshi-+O.uchi.gari,
  Tsuri.komi.goshi-+Sode.tsuri.komi.goshi,
  Tsuri.komi.goshi-+Tsuri.komi.goshi,
  Hane.goshi-+O.uchi.gari,
  Sasae.tsurikomi.ashi-+Uchi.mata,
  Sasae.tsurikomi.ashi-+Tai.otoshi,
  De.ashi.harai-+Tai.otoshi,
  De.ashi.harai-+Yoko.gake,
  Hiza.guruma-+Ko.soto.gake,
  Hiza.guruma-+Hane.goshi,
  Ko.soto.gake-+Hane.goshi,
  Ko.soto.gake-+Ko.uchi.gari,
  Ko.uchi.gari-+Ko.uchi.makikomi,
  Uki.goshi+-O.uchi.gari,
  Uki.goshi-+Tsuri.goshi,
  Tsuri.goshi-+O.uchi.gari,
  Koshi.guruma-+Ashi.guruma,
  Harai.goshi-+O.uchi.gari,
  Hane.goshi-+Harai.goshi,
  Hane.goshi-+Hane.makikomi,
  Ushiro.goshi-+Tai.otoshi,
  Ushiro.goshi-+Ura.nage,
  Tsuri.komi.goshi-+Harai.goshi,
  Tsuri.komi.goshi-+Ko.uchi.gari,
  Uchi.mata-+Harai.goshi,
  Tai.otoshi-+Seoi.otoshi,
  Uki.otoshi-+O.uchi.gari,
  Uki.otoshi-+Tomoe.nage
)
# Create a uniform node dataframe for use with visNetwork
nodes <- data.frame(
  id = V(attack_combinations_igraph)$name,
  label = V(attack_combinations_igraph)$name,
  value = 15,  # All nodes same visual size
  color = "lightblue",
  font = list(color = "black")
)

# Extract edge list from the igraph object
edges <- igraph::as_data_frame(attack_combinations_igraph, what = "edges")

# -----------------------------
# 2. Interactive Network Plot
# -----------------------------
cat("\n--- 2. Interactive Network Plot using visNetwork ---\n")

# Build interactive graph with directional arrows and physics layout
visNetwork(nodes, edges, main = "ðŸ¥‹ Judo Attack Combinations Network") %>%
  visNodes(font = list(size = 18)) %>%
  visEdges(
    arrows = "to",  # Show arrowheads
    color = list(color = "black", highlight = "black", hover = "black")
  ) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visPhysics(
    solver = "forceAtlas2Based",
    forceAtlas2Based = list(gravitationalConstant = -50),
    stabilization = TRUE
  )

# Save the interactive graph as a self-contained HTML
saveWidget(
  visNetwork(nodes, edges, main = "ðŸ¥‹ Judo Attack Combinations Network") %>%
    visNodes(font = list(size = 18)) %>%
    visEdges(arrows = "to", color = list(color = "black", highlight = "black", hover = "black")) %>%
    visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
    visPhysics(solver = "forceAtlas2Based", forceAtlas2Based = list(gravitationalConstant = -50), stabilization = TRUE),
  file = "judo_attack_network.html",
  selfcontained = TRUE
)

# -----------------------------
# 3. Degree Calculation
# -----------------------------
cat("\n--- 3. Calculating In, Out, and Total Degrees for Techniques ---\n")

# Compute degrees for each node
node_names <- V(attack_combinations_igraph)$name
in_degree <- degree(attack_combinations_igraph, mode = "in")
out_degree <- degree(attack_combinations_igraph, mode = "out")
total_degree <- degree(attack_combinations_igraph, mode = "all")

# Create data frame summarizing degrees
degree_df <- data.frame(
  Technique = node_names,
  InDegree = in_degree,
  OutDegree = out_degree,
  TotalDegree = total_degree
)

# Output summary
print("Degree Data for each Technique:")
print(degree_df)

# -----------------------------
# 4. Plot Network by Degree
# -----------------------------
cat("\n--- 4. Plotting Networks Based on Degree ---\n")

# Set layout to be consistent across plots
set.seed(42)
layout_fr <- layout_with_fr(attack_combinations_igraph)

# Plot with in-degree node sizes
V(attack_combinations_igraph)$size <- in_degree * 2 + 5
V(attack_combinations_igraph)$label <- V(attack_combinations_igraph)$name
V(attack_combinations_igraph)$label.cex <- 0.7
V(attack_combinations_igraph)$label.color <- "black"
V(attack_combinations_igraph)$color <- "lightblue"
E(attack_combinations_igraph)$arrow.size <- 0.4
E(attack_combinations_igraph)$color <- "gray30"

plot1 <- function() {
  plot(attack_combinations_igraph, layout = layout_fr, main = "In-Degree Network")
}

# Plot with out-degree node sizes
V(attack_combinations_igraph)$size <- out_degree * 2 + 5

plot2 <- function() {
  plot(attack_combinations_igraph, layout = layout_fr, main = "Out-Degree Network")
}

# Combined panel plot
par(mfrow = c(1, 2), mar = c(1, 1, 4, 1))
plot1()
plot2()

legend("bottom", inset = -0.2, legend = c("Low Degree", "Medium", "High"),
       pt.cex = c(6, 10, 14) / 5, pch = 21, pt.bg = "lightblue", col = "black",
       bty = "n", horiz = TRUE, title = "Node Size (Degree Scale)")

# -----------------------------
# 5. Bar Plot of Degrees
# -----------------------------
cat("\n--- 5. Plotting Degree Bar Charts ---\n")

# Transform data to long format for ggplot
degree_df_long <- degree_df %>%
  pivot_longer(cols = c(InDegree, OutDegree),
               names_to = "DegreeType",
               values_to = "DegreeValue") %>%
  mutate(DegreeType = factor(DegreeType, levels = c("InDegree", "OutDegree")))

# Create grouped bar chart
degree_plot <- ggplot(degree_df_long, aes(x = reorder(Technique, -DegreeValue), y = DegreeValue, fill = DegreeType)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
  scale_fill_brewer(palette = "Set2", name = "Degree Type", labels = c("In-Degree", "Out-Degree")) +
  labs(
    title = "Judo Technique Combination Degrees",
    subtitle = "In-degree: follow-up attack\nOut-degree: initiation attack",
    x = "Judo Technique",
    y = "Degree Count"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 65, hjust = 1, vjust = 1, size = 9),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    plot.subtitle = element_text(hjust = 0.5, size = 10),
    legend.position = "top",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.y = element_blank()
  ) +
  geom_text(aes(label = ifelse(DegreeValue > 0, DegreeValue, "")),
            position = position_dodge(width = 0.9), vjust = -0.25, size = 2.5)

print(degree_plot)

# -----------------------------
# 6. Degree Distribution & Model Fitting
# -----------------------------
cat("\n--- 6. Degree Distribution & Model Comparison ---\n")

# Compute cumulative degree distribution
deg <- degree_distribution(attack_combinations_igraph, cumulative = TRUE, mode = "all")
deg_table <- data.frame(Degree = 0:(length(deg) - 1), CumulativeProbability = deg)

# Filter zero values
deg_table <- deg_table[deg_table$Degree > 0 & deg_table$CumulativeProbability > 0, ]

# Fit power-law
pl_model <- nls(CumulativeProbability ~ a * Degree^(-b),
                data = deg_table, start = list(a = 1, b = 2),
                control = nls.control(warnOnly = TRUE))

# Fit exponential
exp_model <- nls(CumulativeProbability ~ a * exp(-b * Degree),
                 data = deg_table, start = list(a = 1, b = 0.1),
                 control = nls.control(warnOnly = TRUE))

# Fit truncated power-law
tpl_model <- nls(CumulativeProbability ~ a * Degree^(-b) * exp(-c * Degree),
                 data = deg_table, start = list(a = 1, b = 1.5, c = 0.05),
                 control = nls.control(warnOnly = TRUE))

# Compare models using AIC
AICctab(pl_model, exp_model, tpl_model, nobs = length(deg), weights = TRUE, delta = TRUE, base = TRUE)

# Plot with fitted models
plot(deg_table$Degree, deg_table$CumulativeProbability, log = "xy", pch = 16,
     xlab = "Degree", ylab = "P(K â‰¥ k)", main = "Cumulative Degree Distribution (log-log)")

curve(coef(pl_model)[1] * x^(-coef(pl_model)[2]), add = TRUE, col = "blue", lwd = 2)
curve(coef(exp_model)[1] * exp(-coef(exp_model)[2] * x), add = TRUE, col = "red", lwd = 2)
curve(coef(tpl_model)[1] * x^(-coef(tpl_model)[2]) * exp(-coef(tpl_model)[3] * x),
      add = TRUE, col = "darkgreen", lwd = 2)

legend("bottomleft", legend = c("Power-law", "Exponential", "Truncated PL"),
       col = c("blue", "red", "darkgreen"), lwd = 2)

# -----------------------------
# 7. IVI (Integrated Value of Influence)
# -----------------------------
cat("\n--- 7. Calculating IVI Centrality ---\n")

Graph_IVI <- ivi(attack_combinations_igraph, mode = "all")

cent_network.vis(
  graph = attack_combinations_igraph,
  cent.metric = Graph_IVI,
  legend.title = "IVI",
  plot.title = "Attack Combination Network â€“ IVI",
  layout = "kk",
  dist.power = 1.5,
  legend.position = "right",
  boxed.legend = TRUE,
  show.labels = TRUE
)

# -----------------------------
# 8. Community Detection
# -----------------------------
cat("\n--- 8. Community Detection using Edge Betweenness ---\n")

ceb <- cluster_walktrap(attack_combinations_igraph)
V(attack_combinations_igraph)$color <- rainbow(length(ceb))[membership(ceb)]
V(attack_combinations_igraph)$label <- V(attack_combinations_igraph)$name
V(attack_combinations_igraph)$label.cex <- 0.7
V(attack_combinations_igraph)$label.color <- "black"
V(attack_combinations_igraph)$size <- 12
E(attack_combinations_igraph)$arrow.size <- 0.4
E(attack_combinations_igraph)$color <- "gray40"

par(mar = c(0.5, 0.5, 0.5, 0.5))
layout_fr <- layout_with_fr(attack_combinations_igraph)

plot(ceb, attack_combinations_igraph, layout = layout_fr,
     main = "Technique Clusters")
legend("topright", legend = paste("Cluster", 1:length(ceb)),
       col = rainbow(length(ceb)), pch = 21, pt.bg = rainbow(length(ceb)),
       bty = "n", cex = 0.8)
